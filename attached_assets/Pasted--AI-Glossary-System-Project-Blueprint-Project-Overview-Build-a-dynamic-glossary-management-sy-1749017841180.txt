# AI Glossary System - Project Blueprint

## Project Overview
Build a dynamic glossary management system that empowers developers, architects and ai enthusiasts with an intelligent, user-friendly platform for knowledge organization and discovery.

## Foundation
- The glossary will be organized across 12 categories as captured in the categories.json file
- The terms of reference would be presented in a structured manner conforming to the term-schema.json schema
- A sample terms file is shared for reference in sample-terms.json
- How to work with the terms of references
  - The actual term is captured in the field *term*
  - The category the term belongs to is captured in the field *category*
  - Any applicable aliases (alternative names or abbreviations) of the term is captured in field *aliases*
  - The plain-language explanation of the term captured in the field *definition*
  - Any related terms that are conceptually linked to the current term are captured as an array in field *related*
  - Any applicable tags that correspond to this term is captured as an array of strings in the field *tags*
  - Any external URLs with more context or technical reference corresponding to the term is captured as an array of string in the field *references*



## Key Features 

### Core Functionality
- **CRUD Operations**: Create, read, update, delete references with full data persistence
- **Categorization**: Organize references by categories 
- **Tagging System**: Multi-tag support for flexible organization and filtering
- **Search & Filter**: Real-time search across term, descriptions, aliases and tags
- **Authentication**: Admin-based access control with login/logout functionality
- **Responsive Design**: Mobile-first design that works across all devices

### Technical Architecture
- **Frontend**: React 18 + TypeScript + Vite
- **Backend**: Express.js + TypeScript
- **Database**: JSON file-based storage using LowDB (easily replaceable with SQL/NoSQL)
- **Styling**: TailwindCSS + shadcn/ui components
- **State Management**: TanStack Query for server state
- **Forms**: React Hook Form + Zod validation
- **Routing**: Wouter for client-side routing

### Advanced Features
- **Static Deployment**: GitHub Pages support with read-only mode
- **Error Handling**: Comprehensive error boundaries and user feedback
- **Loading States**: Skeleton loaders and pending states throughout

### Deployment Strategy
- **Development**: Full-featured with live editing capabilities
- **Static Deployment**: GitHub Pages with automatic builds, read-only viewing
- **Environment Variables**: Secure credential management via GitHub Secrets if applicable

## File Structure
```
project/
├── client/                    # Frontend application
│   ├── src/
│   │   ├── components/       # Reusable UI components
│   │   ├── pages/           # Route-based pages
│   │   ├── hooks/           # Custom React hooks
│   │   ├── lib/             # Utilities and configurations
│   │   └── types/           # TypeScript type definitions
│   ├── public/              # Static assets
│   └── package.json
├── server/                   # Backend application
│   ├── index.ts            # Express server setup
│   ├── routes.ts           # API route definitions
│   ├── storage.ts          # Database abstraction layer
│   └── package.json
├── shared/                  # Shared types and schemas
│   └── schema.ts           # Zod schemas for validation
├── data/                   # JSON database files
│   ├── references.json
│   ├── categories.json
│   └── users.json
├── .github/workflows/      # GitHub Actions for deployment
│   └── deploy.yml
└── package.json           # Root dependencies
```

## Key Components

### Data Models
Refer to the shared files categories.json for categories, sample-terms.json for terms definition and sample terms in sample-terms.json.

### Essential Components
1. **Header**: Navigation with search, user status, and branding
2. **Sidebar**: Category filtering and navigation
3. **ReferenceCard**: Individual reference display with actions
4. **AddEditReferenceDialog**: Modal for creating/editing references
5. **ReferenceDetailDialog**: Full-screen reference viewer
6. **LoginPage**: Authentication interface

### Storage Interface
Build appropriate storage interface dealing with Categories and Terms.


## Deployment Configuration

### GitHub Actions Workflow
- Automatic builds on push to main/master
- Static data file generation
- Environment variable injection
- GitHub Pages deployment with proper routing

### Environment Variables
- `VITE_GITHUB_PAGES`: Enable static deployment mode
- `VITE_STATIC_USERNAME`: Admin username for deployed app
- `VITE_STATIC_PASSWORD`: Admin password for deployed app

## Development Setup
```bash
# Install dependencies
npm install

# Start development server
npm run dev

# Build for production
npm run build

# Deploy static files
npm run db:push  # For database migrations
```

## Security Features
- Session-based authentication in development
- Environment variable-based auth for deployment
- CSRF protection with express-session
- Input validation with Zod schemas
- XSS protection through React's built-in escaping

## Performance Optimizations
- React Query for efficient data fetching and caching
- Image lazy loading with error fallbacks
- Debounced search functionality
- Optimistic updates for better UX
- Code splitting with dynamic imports

## Accessibility Features
- Semantic HTML structure
- ARIA labels and descriptions
- Keyboard navigation support
- High contrast color schemes
- Responsive typography

## Error Handling Strategy
- Graceful API failure handling
- User-friendly error messages
- Toast notifications for feedback
- Fallback UI for missing data
- Comprehensive loading states

## Migration Path to Database
The system is designed for easy migration from JSON files to a proper database:
1. Replace `JsonDbStorage` with `DatabaseStorage`
2. Update connection string in environment variables
3. Run `npm run db:push` to sync schema
4. No frontend changes required due to storage abstraction
